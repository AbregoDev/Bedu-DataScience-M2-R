v
b
sort(b, decreasing = V)
sort(b, decreasing = T)
1:10
1:100
cls
1:20
d <- 1:36
d
c(a,d)
sort(c(a,d))
m <- matrix(1:9, nrow=3, ncol=3)
m1 <- matrix(1:12, nrow=3, ncol=4)
m1
m2 <- matrix(1:13, nrow=4, ncol=4)
m2
m
m[1,2]
m[1]
m[2]
m[4]
m[6]
m[,2]
m[2,]
x <- 10:21
y <- letters[x]
y
mydf <- data.frame(edad=x, grupo = y)
mydf
str(mydf)
mydf[1]
mydf[2]
mydf[6]
mydf[1,2]
mydf$edad
mydf$grupo
mean(mydf$edad)
paste("La media es: ", mean(mydf$edad))
summary(mydf)
summary?
?
;
help summary()
dim(mydf)
mydf$sexo <- c("H", "M", "H", "M", "H", "H", "M", "H","H","M", "M", "H")
mydf
mydf$sexo <- NULL;
mydf
dim(mydf)
https://raw.githubusercontent.com/beduExpert/Programacion-R-Santander-2021/main/Sesion-01/Data/netflix_titles.csv
netflix <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-R-Santander-2021/main/Sesion-01/Data/netflix_titles.csv")
dim(netflix)
netflix[2]
wich(netflix, netflix$release_year > 2015)
which(netflix, netflix$release_year > 2015)
netflix[netflix$release_year > 2015]
netflix[netflix$release_year > 2015, ]
R.version
2+5
8-9
10*
6
10*78
print('Hey')
install.packages("dplyr")
print('hello')
exp(10)
exp(x=10)
# Prework 1
# Imprimir en pantalla
print('Hello');
# Instalar paquetes
install.packages("dplyr");
?library
# Importar el paquete instalado
library('dplyr')
netflix <- read.csv("~/DS-BEDU/Módulo 2/Sesión 1/netflix.csv")
View(netflix)
View(netflix)
4
is.numeric(9)
is.numeric('a')
class(s)
;
class('s')
;
>
;
;
;
;
;
;
;;
.
:
5+6+
2
;
cls
class('d')
class('dsa')
class('232')
class(232)
typeof(4)
typeof('a')
typeof(TRUE)
class(TRUE)
class(4);
class('fs') # Character
typeof(2);
class(4); # Numerica
typeof(4.7);
typeof(10); # Double
typeof(1+2i); # Double
typeof(4.7); # Double
# Vectores
c(2, 4, 2, 5, 2);
c(2, 4, 'a');
source("~/DS-BEDU/Módulo 2/Sesión 1/Prework 1.R", encoding = 'UTF-8')
# Listas (similares a los vectores, pero soporta varios tipos
# en una sola estructura)
list(24, 'a', 2+i, c(1,2,3));
# Listas (similares a los vectores, pero soporta varios tipos
# en una sola estructura)
list(24, 'a', 2+1i, c(1,2,3));
?matrix
# Matrices. Un tipo de dato para toda la matriz
matrix([1, 2], [4, 1]);
# Matrices. Un tipo de dato para toda la matriz
matrix(c(1, 2), c(4, 1);
# Matrices. Un tipo de dato para toda la matriz
matrix(c(1, 2), c(4, 1));
# Matrices. Un tipo de dato para toda la matriz
matrix(c(1, 2, 4, 1), 2);
# Matrices. Un tipo de dato para toda la matriz
matrix(c(1, 2, 4, 1), 3);
# Matrices. Un tipo de dato para toda la matriz
matrix(c(1, 2, 4, 1), 4);
# Matrices. Un tipo de dato para toda la matriz
matrix(c(1, 2, 4, 1), 1);
# Matrices. Un tipo de dato para toda la matriz
matrix(c(1, 2, 4, 1), 2);
matrix(1:12, 4)
matrix(1:12, 3)
matrix(1:12, byrow = TRUE, 3)
matrix(1:12, byrow = FALSE, 3)
matrix(1:12, byrow = FALSE, 2)
# Max. Obtiene el número máximo
max(c(3/3, 1/6, 4, 35, 3, 4896/369));
# Variables.
x <- (1+1/20)^20;
x;
# Variables.
x <- (1+1/50)^50;
print(x);
# Variables.
x <- (1+1/100)^100;
print(x);
# Variables.
x <- (1+1/500)^500;
print(x);
# Variables.
x <- (1+1/5000)^5000;
print(x);
# Variables.
x <- (1+1/100)^100;
print(x);
# Variables.
x <- (1+1/500)^500;
print(x);
# función mean para promedio
mean(c(4, 2, 6, 3, 5, 7));
print(miFuncion);
# Definición de una función
miFuncion <- function(a, b) {
paso.1 <- (a+b)*4 + 2*4;
paso.2 <- paso.1*2 + c/2;
paso.3 <- paso.2*3;
return(paso.3);
}
print(miFuncion);
print(miFuncion(1, 4, 9));
# Definición de una función
miFuncion <- function(a, b, c) {
paso.1 <- (a+b)*4 + 2*4;
paso.2 <- paso.1*2 + c/2;
paso.3 <- paso.2*3;
return(paso.3);
}
print(miFuncion(1, 4, 9));
# Ejemplo 3: Listas y data frames
# ---------------------
(mi.lista <- list(nombre = "Pepe", no.hijos = 3, edad.hijos = c(4, 7, 9)));
str(mi.lista);
# Acceder a elementos de la lista por clave
mi.lista$nombre;
mi.lista$no.hijos;
# Data frames
(x <- 10:21);
(y <- letters[x]);
letters[x];
(mydf <- data.frame(edad = x, grupo = y));
str(mydf);
# Acceder a la info del data frame
mydf[1];
mydf[,1];
mydf$edad;
# Mensaje
paste("La media de la edad es: ", mean(mydf$edad));
# Detalles del data frame
summary(mydf);
dim(mydf);
mydf;
# Añadir columna al data frame
mydf$sexo <- c("H", "M", "H", "M", "H", "H", "M", "H","H","M", "M", "H");
mydf;
mydf;
# Eliminar columna
mydf$sexo <- NULL
mydf;
dim(mydf);
# Añadir columna al data frame
mydf$sexo <- c("H", "M", "H", "M", "H", "H", "M", "H","H","M", "M", "H");
dim(mydf);
# Eliminar columna
mydf$sexo <- NULL
dim(mydf);
# Ejemplo 4: Descarga y lectura de data sets.
# ---------------------
# Ruta de trabajo actua;
getwd();
# Establecer el directorio de trabajo
setwd("C:\Users\abreg\Documents\DS-BEDU\Módulo 2\Sesión 1\archive");
# Establecer el directorio de trabajo
setwd("C:/Users\abreg\Documents\DS-BEDU\Módulo 2\Sesión 1\archive");
# Establecer el directorio de trabajo
setwd("C:/Users/abreg/Documents/DS-BEDU/Módulo 2/Sesión 1/archive");
# Leer CSV desde comandos
read.csv("colors.csv");
View(netflix)
lego.colors <- read.csv("colors.csv");
str(lego.colors);
head(lego.colors);
tail(lego.colors);
class(lego.colors);
typeof(lego.colors);
dim(lego.colors);
# Leer CSV desde URL
data.url <- read.csv("https://www.football-data.co.uk/mmz4281/2021/SP1.csv");
str(data.url);
head(data.url);
tail(data.url);
dim(data.url);
gc()
View(mydf)
gc()
# Ejemplo 5: Instalar paquetes y cargarlos
# ---------------------
install.packages('ggplot2');
# Versión de R. útil para revisar compatibilidad con paquetes
version;
# Versión de R. útil para revisar compatibilidad con paquetes
version;
version;
# Ejemplo 6: Loops y pseudocódigo
# ---------------------
# Elevar al cuadrado un vector cualquiera mediante for
w <- c(2, 4, 6, 8, 10);
print('Loop que calcula el cuadrado de los elementos en el vector w');
for(i in 1:length(w)) {
w.sq <- w[i]**2;
print(w.sq);
}
count <- 0;
while(count < 10) {
print(count);
count <- count + 1;
}
# Ejemplo if
(x <- runif(1, 0, 10)); # Número aleatorio entre 0 y 10
(x <- runif(1, 0, 10)); # Número aleatorio entre 0 y 10
if(x > 5) {
y <- T;
print(paste(y, ", x=", round(x,2), "> 5"));
} else {
y <- F;
print(paste(y, ", x=", round(x,2), "<= 5"));
}
(x <- runif(1, 0, 10)); # Número aleatorio entre 0 y 10
if(x > 5) {
y <- T;
print(paste(y, ", x=", round(x,2), "> 5"));
} else {
y <- F;
print(paste(y, ", x=", round(x,2), "<= 5"));
}
(x <- runif(1, 0, 10)); # Número aleatorio entre 0 y 10
if(x > 5) {
y <- T;
print(paste(y, ", x=", round(x,2), "> 5"));
} else {
y <- F;
print(paste(y, ", x=", round(x,2), "<= 5"));
}
(x <- runif(1, 0, 10)); # Número aleatorio entre 0 y 10
if(x > 5) {
y <- T;
print(paste(y, ", x=", round(x,2), "> 5"));
} else {
y <- F;
print(paste(y, ", x=", round(x,2), "<= 5"));
}
(x <- runif(1, 0, 10)); # Número aleatorio entre 0 y 10
if(x > 5) {
y <- T;
print(paste(y, ", x=", round(x,2), "> 5"));
} else {
y <- F;
print(paste(y, ", x=", round(x,2), "<= 5"));
}
(x <- runif(1, 0, 10)); # Número aleatorio entre 0 y 10
if(x > 5) {
y <- T;
print(paste(y, ", x=", round(x,2), "> 5"));
} else {
y <- F;
print(paste(y, ", x=", round(x,2), "<= 5"));
}
(x <- runif(1, 0, 10)); # Número aleatorio entre 0 y 10
if(x > 5) {
y <- T;
print(paste(y, ", x=", round(x,2), "> 5"));
} else {
y <- F;
print(paste(y, ", x=", round(x,2), "<= 5"));
}
# Leer el archivo netflix_titles.csv desde GitHub, almacenarlo en un df llamado netflix
netflix <- read.csv('https://raw.githubusercontent.com/beduExpert/Programacion-R-Santander-2021/main/Sesion-01/Data/netflix_titles.csv');
# Obtener la dimensión y el tipo de objeto que se obtiene
dim(netflix);
class(netflix);
# Obtener los títulos que se estrenaron después del 2015. Almacenar este df
# en una variable llamada net.2015.
head(netflix);
# Obtener la dimensión y el tipo de objeto que se obtiene.
dim(netflix);
# Obtener los títulos que se estrenaron después del 2015. Almacenar este df
# en una variable llamada net.2015.
netflix[1,1];
# Obtener los títulos que se estrenaron después del 2015. Almacenar este df
# en una variable llamada net.2015.
netflix[1,2];
# Obtener los títulos que se estrenaron después del 2015. Almacenar este df
# en una variable llamada net.2015.
netflix[1,3];
# Obtener los títulos que se estrenaron después del 2015. Almacenar este df
# en una variable llamada net.2015.
netflix[1,4];
# Obtener los títulos que se estrenaron después del 2015. Almacenar este df
# en una variable llamada net.2015.
netflix[1,5];
# Obtener los títulos que se estrenaron después del 2015. Almacenar este df
# en una variable llamada net.2015.
netflix[1,6];
?which
# Obtener los títulos que se estrenaron después del 2015. Almacenar este df
# en una variable llamada net.2015.
net.2015 <- netflix[netflix$release_year > 2015];
# Obtener los títulos que se estrenaron después del 2015. Almacenar este df
# en una variable llamada net.2015.
net.2015 <- netflix[netflix$release_year > 2015, ];
net.2015 <- netflix[2, ];
netflix[2, ];
# Obtener los títulos que se estrenaron después del 2015. Almacenar este df
# en una variable llamada net.2015.
net.2015 <- netflix[netflix$release_year > 2015, ];
dim(net.2015);
dim(netflix);
dim(net.2015);
net.2015 <- releases.after.2015$titles;
# Obtener los títulos que se estrenaron después del 2015. Almacenar este df
# en una variable llamada net.2015.
releases.after.2015 <- netflix[netflix$release_year > 2015, ];
net.2015 <- releases.after.2015$title;
dim(net.2015);
releases.after.2015
# Obtener los títulos que se estrenaron después del 2015. Almacenar este df
# en una variable llamada net.2015.
releases.after.2015 <- netflix[netflix$release_year > 2015, ];
net.2015 <- releases.after.2015$title;
length(net.2015);
net.2015
head(net.2015)
# Escribir los resultados en un archivo .CSV llamado res.netflix.csv
?write.csv;
# Escribir los resultados en un archivo .CSV llamado res.netflix.csv
getwd();
# Escribir los resultados en un archivo .CSV llamado res.netflix.csv
setwd('C:\Users\abreg\Documents\DS-BEDU\Módulo 2\Sesión 1');
# Escribir los resultados en un archivo .CSV llamado res.netflix.csv
setwd('C:/Users/abreg/Documents/DS-BEDU/Módulo 2/Sesión 1');
write.csv(net.2015);
write.csv(net.2015, 'res.netflix.csv');
# Calcular el data frame transpuesto, asignarle el nombre de tAamazon
# y convertirlo en un data frame
t(amazon.best);
# Almacenar en un data frame que se llame amazon.best
amazon.best <- read.csv("https://raw.githubusercontent.com/ecoronadoj/Sesion_1/main/Data/bestsellers%20with%20categories.csv")
# Calcular el data frame transpuesto, asignarle el nombre de tAamazon
# y convertirlo en un data frame
t(amazon.best);
class(tAmazon);
# Calcular el data frame transpuesto, asignarle el nombre de tAamazon
# y convertirlo en un data frame
tAmazon <- t(amazon.best);
class(tAmazon);
# Calcular el data frame transpuesto, asignarle el nombre de tAamazon
# y convertirlo en un data frame
tAmazon <- as.data.frame(t(amazon.best));
class(tAmazon);
# Usar el nombre de los libros como el nombre de las columnas
?names
# Usar el nombre de los libros como el nombre de las columnas
colnames(tAmazon) <- tAmazon[,1];
# Usar el nombre de los libros como el nombre de las columnas
colnames(tAmazon) <- tAmazon[1,];
head(tAmazon);
dim(tAmazon)
head(tAmazon);
row.names(tAmazon);
colnames(tAmazon);
rownames();
rownames(tAmazon);
row.names(tAmazon);
rownames(tAmazon);
colnames(tAmazon);
col.names(tAmazon);
# Libro de menor y mayor precio
which.max(tAmazon["Price",]);
# Libro de menor y mayor precio
which.max(tAmazon["Price",]);
which.min(tAmazon["Price",]);
# Generar un vector de 44 entradas (aleatorias), llamado ran
?rnom
# Generar un vector de 44 entradas (aleatorias), llamado ran
?rnorm
# Generar un vector de 44 entradas (aleatorias), llamado ran
ran <- c(1);
ran[2] <- 2;
print(ran)
ran[4] <- 6;
ran
# Generar un vector de 44 entradas (aleatorias), llamado ran
rnorm();
# Generar un vector de 44 entradas (aleatorias), llamado ran
rnorm(5);
# Generar un vector de 44 entradas (aleatorias), llamado ran
rnorm(1);
# Generar un vector de 44 entradas (aleatorias), llamado ran
rnorm(1);
# Generar un vector de 44 entradas (aleatorias), llamado ran
rnorm(1);
# Generar un vector de 44 entradas (aleatorias), llamado ran
rnorm(1);
# Generar un vector de 44 entradas (aleatorias), llamado ran
ran <- c();
# Generar un vector de 44 entradas (aleatorias), llamado ran
ran <- c();
for(i in 1:44) {
ran[i] <- rnorm(1)[0];
}
ran
ran;
ran[0];
ran[i] <- rnorm(1);
for(i in 1:44) {
ran[i] <- rnorm(1);
}
ran[0];
ran[1];
ran;
length(ran);
# Escribir un loop que eleve al cubo las pimeras 15 entradas
# y les sume 12
for(k in 1:15) {
ran[k] <- ran[k]**3 + 12;
}
ran;
# Escribir un loop que eleve al cubo las pimeras 15 entradas
# y les sume 12
aux <- c();
for(k in 1:15) {
aux[k] <- ran[k]**3 + 12;
}
# Guarda el resultado en un data frame, donde la primera columna
# sea el número aleatorio y la segunda el resultado. Nómbralo df.al
df.al <- data.frame(ran[1:15], aux);
df.al
# Generar un vector de 44 entradas (aleatorias), llamado ran
ran <- c();
for(i in 1:44) {
ran[i] <- rnorm(1);
}
for(k in 1:15) {
aux[k] <- ran[k]**3 + 12;
}
# Guarda el resultado en un data frame, donde la primera columna
# sea el número aleatorio y la segunda el resultado. Nómbralo df.al
df.al <- data.frame(ran[1:15], aux);
df.al

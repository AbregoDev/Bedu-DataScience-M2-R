# Vector length
vec.len <- length(vector);
# Vector index
i <- vec.len / 2;
if(vec.len %% 2 == 0) {
mediana <- (vector[i] + vector[i + 1]) / 2;
} else {
mediana <- vector[ceiling(i)];
}
return(mediana);
}
y <- c(2,4,6,7,3,4,6,7,6);
sort(y);
mediana(y);
mediana <- ceiling(i);
# Reto 1: Función mediana
# ---------------------
# Crear una función que calcule la mediana sin usar median()
mediana <- function(vector) {
# Sorted vector
sorted.vector <- sort(vector);
# Vector length
vec.len <- length(vector);
# Vector index
i <- vec.len / 2;
if(vec.len %% 2 == 0) {
mediana <- (vector[i] + vector[i + 1]) / 2;
} else {
mediana <- ceiling(i);
}
return(mediana);
}
y <- c(2,4,6,7,3,4,6,7,6);
sort(y);
mediana(y);
# Reto 1: Función mediana
# ---------------------
# Crear una función que calcule la mediana sin usar median()
mediana <- function(vector) {
# Sorted vector
sorted.vector <- sort(vector);
# Vector length
vec.len <- length(vector);
# Vector index
i <- vec.len / 2;
if(vec.len %% 2 == 0) {
mediana <- (vector[i] + vector[i + 1]) / 2;
} else {
mediana <- vector[5];
}
return(mediana);
}
y <- c(2,4,6,7,3,4,6,7,6);
mediana(y);
# Reto 1: Función mediana
# ---------------------
# Crear una función que calcule la mediana sin usar median()
mediana <- function(vector) {
# Sorted vector
sorted.vector <- sort(vector);
# Vector length
vec.len <- length(vector);
# Vector index
i <- vec.len / 2;
if(vec.len %% 2 == 0) {
mediana <- (sorted.vector[i] + sorted.vector[i + 1]) / 2;
} else {
mediana <- sorted.vector[ceiling(i)];
}
return(mediana);
}
y <- c(2,4,6,7,3,4,6,7,6);
mediana(y);
y <- c(2,4,6,7,3,4,6,7);
sort(y);
mediana(y);
# Ejemplo 3. Funciones na.omit y complete.cases
airquality
# Ejemplo 3. Funciones na.omit y complete.cases
?airquality
# Ejemplo 3. Funciones na.omit y complete.cases
head(airquality);
library(dplyr);
str(airquality);
library(help = "datasets")
str(airquality);
range(airquality$Temp)
?str
# Dimensión
dim(airquality)
# Filas sin NA
filas.ok <- complete.cases(airquality);
filas.ok
class(filas.ok)
sum(airquality);
sum(filas.ok);
airquality[bien,];
airquality[filas.ok,];
# Obtener un rango de columnas
data <- select(airquality, Ozone:Temp)
?apply
z <- c(3,5,7,2,5,7);
apply(z, FUN = *2);
apply(z, FUN = (*2);
apply(z, FUN = mean());
apply(z, FUN = mean);
apply(z, 1, FUN = mean);
dim(z)
apply(data, 2, mean)
data
str(data)
apply(data, 2, mean, na.rm = T);
# Obtener un rango de columnas
str(data);
apply(data, 2, mean);
apply(data, 2, mean, na.rm = T);
# na.omit devuelve el objeto sin datos na
na.omit(data);
# Obtener un rango de columnas
str(data);
data;
# na.omit devuelve el objeto sin datos na
na.omit(data);
data;
# na.omit devuelve el objeto sin datos na
na.omit(data);
m1 <- apply(na.omit(data), 2, mean);
m1
(m1 <- apply(na.omit(data), 2, mean));
b <- complete.cases(data);
(b <- complete.cases(data));
(m2 <- apply(data[b,], 2, mean));
(m1 <- apply(na.omit(data), 2, mean));
identical(m1, m2); # equiv a m1
# Ejemplo 4. Funciones cbind, rbind
# cbind toma una sucesión de vectores, matrices o data frames
# y los combina por columnas
cbind(1:10, 11:20, 21:30);
cbind(1:10, matrix(11:30, ncol=2));
cbind(1:10, matrix(31:50, ncol=2));
cbind(data.frame(x = 1:10, y = 11:20), z = 21:30);
cbind(data.frame(x = 1:10, y = 11:20), 21:30);
z =
cbind(data.frame(x = 1:10, y = 11:20), z = 21:30);
cbind(data.frame(x = 1:10, y = 11:20), z = 21:30);
# Ejemplo 4. Funciones cbind, rbind
# cbind toma una sucesión de vectores, matrices o data frames
# y los combina por columnas
cbind(1:10, 11:20, 21:30);
# rbind funciona similar a cbind, pero combina por filas
df1 <- data.frame(x = 1:5, y = 6:10, z = 16:20);
df1
df2 <- data.frame(x = 51:55, y = 101:105, z = 151:160);
df2
rbind(df1, df2);
df2 <- data.frame(x = 51:55, y = 101:105, w = 151:160);
rbind(df1, df2);
df2 <- data.frame(x = 51:55, y = 101:105, z = 151:160);
rbind(df1, df2);
# Ejemplo 5. Funciones apply, lapply y do.call
# ---------------------
# Le aplica a un vector una función y lo retorna
x <- matrix(1:49, ncol = 7);
x
apply(x, 1, mean);
sum(c(1,2,3,4))
sum(x[5,])
apply(x, 2, median);
?lapply
# lapply aplica una función a cada uno de los elementos
# de una lista o un vector
lapply(c(2,4,6,3,5), *2)
# lapply aplica una función a cada uno de los elementos
# de una lista o un vector
lapply(c(2,4,6,3,5), $*2)
# lapply aplica una función a cada uno de los elementos
# de una lista o un vector
lapply(c(2,4,6,3,5), (x => 2*x))
# lapply aplica una función a cada uno de los elementos
# de una lista o un vector
lapply(c(2,4,6,3,5), function(x) { return(2*x) } )
??odd
# lapply aplica una función a cada uno de los elementos
# de una lista o un vector
library(DescTools);
lapply(c(2,4,6,3,5),  IsOdd)
# Leer ágilmente un conjunto de csv
pwd
# Leer ágilmente un conjunto de csv
gws
# Leer ágilmente un conjunto de csv
gwd()
# Leer ágilmente un conjunto de csv
wd()
??workspace
??work
??workdir
??directory
getwd()
# Leer ágilmente un conjunto de csv
setwd('../cic')
# Leer ágilmente un conjunto de csv
setwd('./cic')
getwd()
# Leer ágilmente un conjunto de csv
setwd('C:/Users/abreg/Documents/DS-BEDU/')
getwd()
# Leer ágilmente un conjunto de csv
setwd('C:/Users/abreg/Documents/DS-BEDU/Módulo 1')
getwd()
# Leer ágilmente un conjunto de csv
setwd('C:/Users/abreg/Documents/DS-BEDU/Módulo 1/Sesión 2/')
getwd()
# Leer ágilmente un conjunto de csv
setwd('C:/Users/abreg/Documents/DS-BEDU/Módulo 1/Sesión 2/soccer')
# Leer ágilmente un conjunto de csv
setwd('C:/Users/abreg/Documents/DS-BEDU/Módulo 1/Sesión 2/soccer')
# Leer ágilmente un conjunto de csv
setwd('C:/Users/abreg/Documents/DS-BEDU/Módulo 1/Sesión 2/soccer/')
# Leer ágilmente un conjunto de csv
setwd('C:/Users/abreg/Documents/DS-BEDU/Módulo 2/Sesión 2/soccer/')
getwd()
u1011 <- "https://www.football-data.co.uk/mmz4281/1011/SP1.csv"
u1112 <- "https://www.football-data.co.uk/mmz4281/1112/SP1.csv"
u1213 <- "https://www.football-data.co.uk/mmz4281/1213/SP1.csv"
u1314 <- "https://www.football-data.co.uk/mmz4281/1314/SP1.csv"
download.file(url = u1011, destfile = "SP1-1011.csv", mode = "wb");
download.file(url = u1112, destfile = "SP1-1112.csv", mode = "wb");
download.file(url = u1213, destfile = "SP1-1213.csv", mode = "wb");
download.file(url = u1314, destfile = "SP1-1314.csv", mode = "wb");
dir();
# leer todos los archivos de dir()
lista <- lapply(dir(), read.csv);
# Ver archivos descargados
dir();
# leer todos los archivos de dir()
lista <- lapply(dir(), read.csv);
# seleccionar solo algunas columnas
lista <- lapply(dir(), select, Date:FTR);
# seleccionar solo algunas columnas
lista <- lapply(lista, select, Date:FTR);
lista;
head(lista)
head(lista)
class(lista);
head(lista[1]);
head(lista[[1]]);
?do.call
# Combinar cada uno de los elementos en lista
data <- do.call(rbind, lista);
head(data);
dim(data);
bundesliga.1 <- read.csv('https://www.football-data.co.uk/mmz4281/1718/D1.csv')
bundesliga.1 <- read.csv('https://www.football-data.co.uk/mmz4281/1819/D1.csv')
bundesliga.1 <- read.csv('https://www.football-data.co.uk/mmz4281/1920/D1.csv')
bundesliga.1 <- read.csv('https://www.football-data.co.uk/mmz4281/2021/D1.csv')
# Reto 3. Lectura de datos y uso de dplyr
# ---------------------
# Descargar los archivos ... e importarlos en R
bundesliga.1 <- read.csv('https://www.football-data.co.uk/mmz4281/1718/D1.csv')
bundesliga.2 <- read.csv('https://www.football-data.co.uk/mmz4281/1819/D1.csv')
bundesliga.3 <- read.csv('https://www.football-data.co.uk/mmz4281/1920/D1.csv')
bundesliga.4 <- read.csv('https://www.football-data.co.uk/mmz4281/2021/D1.csv')
# Usando select de dplyr, seleccionar solo las columnas:
# Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR
?select
# Usando select de dplyr, seleccionar solo las columnas:
# Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR
??select
# Usando select de dplyr, seleccionar solo las columnas:
# Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR
??select dplyr
# Usando select de dplyr, seleccionar solo las columnas:
# Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR
??selectdplyr
# Usando select de dplyr, seleccionar solo las columnas:
# Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR
??dplyr
# Usando select de dplyr, seleccionar solo las columnas:
# Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR
select(bundesliga.1, Date);
# Usando select de dplyr, seleccionar solo las columnas:
# Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR
select(bundesliga.1, Date, HomeTeam);
# Usando select de dplyr, seleccionar solo las columnas:
# Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR
select(bundesliga.1, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR);
# Usando select de dplyr, seleccionar solo las columnas:
# Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR
select(bundesliga.1, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR);
# Usando select de dplyr, seleccionar solo las columnas:
# Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR
select(bundesliga.1, Date);
, HomeTeam, AwayTeam, FTHG, FTAG, FTR
# Usando select de dplyr, seleccionar solo las columnas:
# Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR
select(bundesliga.1, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR);
# Usando select de dplyr, seleccionar solo las columnas:
# Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR
HEAD(select(bundesliga.1, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR));
# Usando select de dplyr, seleccionar solo las columnas:
# Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR
head(select(bundesliga.1, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR));
# Usando select de dplyr, seleccionar solo las columnas:
# Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR
select(bundesliga.1, Date, HomeTeam, AwayTeam, FTHG = HG, FTAG, FTR);
# Usando select de dplyr, seleccionar solo las columnas:
# Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR
select(bundesliga.1, Date, HomeTeam, AwayTeam, HG = FTHG, FTAG, FTR);
# Usando select de dplyr, seleccionar solo las columnas:
# Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR
select(bundesliga.1, Date, HomeTeam, AwayTeam,
HomeGoals = FTHG, AwayGoals = FTAG, FTR);
select(bundesliga.2, Date, HomeTeam, AwayTeam,
HomeGoals = FTHG, AwayGoals = FTAG, FTR);
select(bundesliga.3, Date, HomeTeam, AwayTeam,
HomeGoals = FTHG, AwayGoals = FTAG, FTR);
select(bundesliga.4, Date, HomeTeam, AwayTeam,
HomeGoals = FTHG, AwayGoals = FTAG, FTR);
# Combina cada uno de los data frames en un único data frame
# con ayuda de rbind y do.call
?rbind
# Combina cada uno de los data frames en un único data frame
# con ayuda de rbind y do.call
rbind(bundesliga.1, bundesliga.2);
dim(bundesliga.1)
dim(bundesliga.2)
# Combina cada uno de los data frames en un único data frame
# con ayuda de rbind y do.call
rbind(bundesliga.1, bundesliga.2);
dim(bundesliga.1)
dim(bundesliga.2)
dim(bundesliga.1)
# Usando select de dplyr, seleccionar solo las columnas:
# Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR
b.1 <- select(bundesliga.1, Date, HomeTeam, AwayTeam,
HomeGoals = FTHG, AwayGoals = FTAG, FTR);
b.2 <- select(bundesliga.2, Date, HomeTeam, AwayTeam,
HomeGoals = FTHG, AwayGoals = FTAG, FTR);
b.3 <- select(bundesliga.3, Date, HomeTeam, AwayTeam,
HomeGoals = FTHG, AwayGoals = FTAG, FTR);
b.4 <- select(bundesliga.4, Date, HomeTeam, AwayTeam,
HomeGoals = FTHG, AwayGoals = FTAG, FTR);
# Combina cada uno de los data frames en un único data frame
# con ayuda de rbind y do.call
rbind(b.1, b.2);
dim(b.1)
dim(b.2)
# Combina cada uno de los data frames en un único data frame
# con ayuda de rbind y do.call
b.comb <- rbind(b.1, b.2);
dim(b.comb)
# Combina cada uno de los data frames en un único data frame
# con ayuda de rbind y do.call
b.comb <- rbind(b.1, b.2, b.3);
dim(b.comb)
# Reto 3. Lectura de datos y uso de dplyr
# ---------------------
# Descargar los archivos ... e importarlos en R
setwd('C:/Users/abreg/Documents/DS-BEDU/Módulo 2/Sesión 2/bundesliga/')
# Reto 3. Lectura de datos y uso de dplyr
# ---------------------
# Descargar los archivos ... e importarlos en R
setwd('C:/Users/abreg/Documents/DS-BEDU/Módulo 2/Sesión 2/bundesliga/')
# Reto 3. Lectura de datos y uso de dplyr
# ---------------------
# Descargar los archivos ... e importarlos en R
setwd('C:/Users/abreg/Documents/DS-BEDU/Módulo 2/Sesión 2/bundesliga/')
bundesliga.17.18 <- 'https://www.football-data.co.uk/mmz4281/1718/D1.csv';
bundesliga.18.19 <- 'https://www.football-data.co.uk/mmz4281/1819/D1.csv';
bundesliga.19.20 <- 'https://www.football-data.co.uk/mmz4281/1920/D1.csv';
bundesliga.20.21 <- 'https://www.football-data.co.uk/mmz4281/2021/D1.csv';
dir();
dir();
setwd('C:/Users/abreg/Documents/DS-BEDU/Módulo 2/Sesión 2/bundesliga/')
bundesliga.17.18 <- 'https://www.football-data.co.uk/mmz4281/1718/D1.csv';
bundesliga.18.19 <- 'https://www.football-data.co.uk/mmz4281/1819/D1.csv';
bundesliga.19.20 <- 'https://www.football-data.co.uk/mmz4281/1920/D1.csv';
bundesliga.20.21 <- 'https://www.football-data.co.uk/mmz4281/2021/D1.csv';
download.file(url = bundesliga.17.18, destfile = "bundes1718.csv", mode = "wb");
download.file(url = bundesliga.18.19, destfile = "bundes1819.csv", mode = "wb");
download.file(url = bundesliga.19.20, destfile = "bundes1920.csv", mode = "wb");
download.file(url = bundesliga.20.21, destfile = "bundes2021.csv", mode = "wb");
dir();
b.1 <- select(bundesliga.1, Date, HomeTeam, AwayTeam,
HomeGoals = FTHG, AwayGoals = FTAG, FTR);
b.2 <- select(bundesliga.2, Date, HomeTeam, AwayTeam,
HomeGoals = FTHG, AwayGoals = FTAG, FTR);
b.3 <- select(bundesliga.3, Date, HomeTeam, AwayTeam,
HomeGoals = FTHG, AwayGoals = FTAG, FTR);
b.4 <- select(bundesliga.4, Date, HomeTeam, AwayTeam,
HomeGoals = FTHG, AwayGoals = FTAG, FTR);
data <- do.call(rbind, c(b.1, b.2, b.3, b.4));
data;
list.files()
dir()
lista <- lapply(list.files(), read.csv);
# Usando select de dplyr, seleccionar solo las columnas:
# Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR
lista <- lapply(lista, select, Date, HomeTeam:FTR)
lista
head(lista[1]);
head(lista[[1]]);
# Combina cada uno de los data frames en un único data frame
# con ayuda de rbind y do.call
data <- do.call(rbind, lista);
head(data);
tail(data);
dim(data);
url1 <- "https://data.humdata.org/hxlproxy/data/download/time_series_covid19_confirmed_global_narrow.csv?dest=data_edit&filter01=explode&explode-header-att01=date&explode-value-att01=value&filter02=rename&rename-oldtag02=%23affected%2Bdate&rename-newtag02=%23date&rename-header02=Date&filter03=rename&rename-oldtag03=%23affected%2Bvalue&rename-newtag03=%23affected%2Binfected%2Bvalue%2Bnum&rename-header03=Value&filter04=clean&clean-date-tags04=%23date&filter05=sort&sort-tags05=%23date&sort-reverse05=on&filter06=sort&sort-tags06=%23country%2Bname%2C%23adm1%2Bname&tagger-match-all=on&tagger-default-tag=%23affected%2Blabel&tagger-01-header=province%2Fstate&tagger-01-tag=%23adm1%2Bname&tagger-02-header=country%2Fregion&tagger-02-tag=%23country%2Bname&tagger-03-header=lat&tagger-03-tag=%23geo%2Blat&tagger-04-header=long&tagger-04-tag=%23geo%2Blon&header-row=1&url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_confirmed_global.csv"
url2 <- "https://data.humdata.org/hxlproxy/data/download/time_series_covid19_deaths_global_narrow.csv?dest=data_edit&filter01=explode&explode-header-att01=date&explode-value-att01=value&filter02=rename&rename-oldtag02=%23affected%2Bdate&rename-newtag02=%23date&rename-header02=Date&filter03=rename&rename-oldtag03=%23affected%2Bvalue&rename-newtag03=%23affected%2Binfected%2Bvalue%2Bnum&rename-header03=Value&filter04=clean&clean-date-tags04=%23date&filter05=sort&sort-tags05=%23date&sort-reverse05=on&filter06=sort&sort-tags06=%23country%2Bname%2C%23adm1%2Bname&tagger-match-all=on&tagger-default-tag=%23affected%2Blabel&tagger-01-header=province%2Fstate&tagger-01-tag=%23adm1%2Bname&tagger-02-header=country%2Fregion&tagger-02-tag=%23country%2Bname&tagger-03-header=lat&tagger-03-tag=%23geo%2Blat&tagger-04-header=long&tagger-04-tag=%23geo%2Blon&header-row=1&url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_deaths_global.csv"
download.file(url1, 'covid19.confirmados.csv', mode = 'wb');
download.file(url2, 'covid19.muertes.csv', mode = 'wb');
conf <- read.csv('covid19.confirmados.csv');
dec <- read.csv('covid19.muertes.csv');
head(conf)
view(head(conf))
View(head(conf))
View(tail(conf))
str(conf);
str(des);
str(dec);
conf[-1,]
Sconf <- conf[-1,];
Sdec <- dec[-1,];
head(Sconf)
head(Sdec)
dim(Sdec)
dim(Sconf)
# Seleccionar únicamente país, fecha y número de casos acumulados
Sconf <- select(Sconf, Country.Region, Date, Value);
# Renombrar encabezados de columnas
Sconf <- rename(Sconf, Country = Country.Region,
Fecha = Date, Infectados = Values);
# Renombrar encabezados de columnas
Sconf <- rename(Sconf, Country = Country.Region,
Fecha = Date, Infectados = Value);
# equiv a select(Sconf, Country = Country.Region,
#               Fecha = Date, Infectados = Value);
head(Sconf);
# equiv a select(Sconf, Country = Country.Region,
#               Fecha = Date, Infectados = Value);
str(Sconf);
?mutate
# Cambiar el tipo de las columnas
Sconf <- mutate(Sconf, Fecha = as.Date(Fecha, '%Y-%m-%d'),
Infectados = as.numeric(Infectados));
# equiv a select(Sconf, Country = Country.Region,
#               Fecha = Date, Infectados = Value);
str(Sconf);
# Análogamente con el data frame de decesos
Sdec <- select(Sdec, Country = Country.Region,
Fecha = Date, Infectados = Value);
str(dec);
str(Sdec);
Sdec <- mutate(Sdec, Fecha = as.Date(Fecha, '%Y-%m-%d'),
Infectados = as.numeric(Infectados));
str(Sdec);
# Unir data frames por una columna común
Scm <- merge(Sconf, Sdec);
str(Scm);
# Análogamente con el data frame de decesos
Sdec <- select(Sdec, Country = Country.Region,
Fecha = Date, Decesos = Value);
Sdec <- dec[-1,];
# Análogamente con el data frame de decesos
Sdec <- select(Sdec, Country = Country.Region,
Fecha = Date, Decesos = Value);
Sdec <- mutate(Sdec, Fecha = as.Date(Fecha, '%Y-%m-%d'),
Decesos = as.numeric(Decesos));
str(Sdec);
# Unir data frames por una columna común
Scm <- merge(Sconf, Sdec);
str(Scm);
dim(Scm)
?merge
head(Scm)
# Filtrar para el primer día de infectados en México
mex <- filter(Scm, Country == 'Mexico');
mex
dim(mex)
mex <- filter(Scm, Infectados != 0);
mex
str(Scm);
# Filtrar para el primer día de infectados en México
mex <- filter(Scm, Country == 'Mexico');
mex
mex <- filter(mex, Infectados != 0);
mex
tail(mex)
# Agregar nuevas columnas
mex <- mutate(mex, NI = c(1, diff(Infectados)));
head(mex)
?diff
mex <- mutate(mex, ND = c(0, diff(Decesos)));
head(mex)
head(tail)
tail(mex);
mex <- mutate(mex, Letalidad = round(Decesos / Infectados * 100, 1));
tail(mex);
head(mex);
(mex);
mex <- mutate(mex, IDA = lag(Infectados), DDA = lag(Decesos)) # Valores día anterior
mex <- mutate(mex, FCI = Infectados/IDA, FCD = Decesos/DDA) # Factores de Crecimiento
mex <- mutate(mex, Dia = 1:dim(mex)[1]) # Días de contingencia
tail(mex);
tail(mex[,11]);
tail(mex[,12]);
tail(head[,12]);
head(mex[,12]);
# Guardar archivo
write.csv(mex, "C19Mexico.csv", row.names = FALSE);
